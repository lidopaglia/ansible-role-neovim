---

- name: Install Neovim build dependencies
  block:
    - name: Install Neovim build dependencies (Ubuntu).
      become: true
      ansible.builtin.apt:
        name:
          - autoconf
          - automake
          - cmake
          - curl
          - doxygen
          - g++
          - gettext
          - git
          - libtool
          - libtool-bin
          - ninja-build
          - pkg-config
          - unzip
        state: latest
      when: ansible_distribution == 'Ubuntu'

    - name: Install Neovim build dependencies (Fedora).
      become: true
      ansible.builtin.dnf:
        name:
          - autoconf
          - automake
          - cmake
          - curl
          - gcc
          - gcc-c++
          - gettext
          - git
          - libtool
          - make
          - ninja-build
          - patch
          - pkgconfig
          - unzip
        state: latest
      when: ansible_distribution == 'Fedora'

    - name: Install Neovim build dependencies (Archlinux).
      become: true
      community.general.pacman:
        name:
          - base-devel
          - cmake
          - curl
          - git
          - ninja
          - tree-sitter
          - unzip
        state: latest
      when: ansible_os_family == 'Archlinux'

# ---------------------------------------------------------------------------- #

- name: Remove distribution packaged version
  block:
    - name: Gather existing package facts
      ansible.builtin.package_facts:
        manager: "auto"
      failed_when: false
      changed_when: false

    - name: Remove distribution packaged version
      become: true
      ansible.builtin.package:
        name: neovim
        state: absent
      when: >-
        'neovim' in ansible_facts.packages and
        neovim_remove_distro_version == true

# ---------------------------------------------------------------------------- #

- name: Gather existing Neovim command information
  block:
    - name: Check if Neovim command is present.
      ansible.builtin.command: which nvim
      failed_when: false
      changed_when: false
      check_mode: false
      register: neovim_exists

    - name: Gather Neovim existing version if present.
      ansible.builtin.shell:
        cmd: "nvim --version | head -n1 | cut -d' ' -f2"
      failed_when: false
      changed_when: false
      check_mode: false
      register: neovim_installed_version
      when: neovim_exists.rc == 0

    - name: Gather Neovim existing commit id if present.
      ansible.builtin.shell:
        cmd: "nvim --version | head -n1 | cut -d'-' -f3"
      failed_when: false
      changed_when: false
      check_mode: false
      register: neovim_installed_commit_id
      when: neovim_exists.rc == 0

    - name: set commit id
      set_fact:
        commit_id: "{{ neovim_installed_commit_id.stdout }}"
      when: neovim_exists.rc == 0

# ---------------------------------------------------------------------------- #

- name: Validate Neovim source path folder pre-reqs.
  block:
    - name: Ensure Neovim source path is present.
      ansible.builtin.file:
        path: "{{ neovim_source_path }}"
        state: directory
        mode: '0755'

    - name: Check if neovim source path is empty.
      ansible.builtin.find:
        paths: "{{ neovim_source_path }}"
      failed_when: false
      changed_when: false
      register: neovim_src_empty

    - name: Clone from GitHub when source path is empty.
      ansible.builtin.git:
        repo: "https://github.com/neovim/neovim.git"
        dest: "{{ neovim_source_path }}"
      when: neovim_src_empty.matched == 0

    - name: check if neovim source path is a git.
      ansible.builtin.stat:
        path: "{{ neovim_source_path }}/.git"
      register: neovim_is_git
      failed_when: not neovim_is_git.stat.exists

    - name: Check if neovim build path exists.
      ansible.builtin.stat:
        path: "{{ neovim_source_path }}/build"
      failed_when: false
      changed_when: false
      register: neovim_build_path_exists
      when: neovim_is_git

# ---------------------------------------------------------------------------- #

- name: Git pull for latest repository changes.
  ansible.builtin.shell:
    cmd: git pull origin master &>/dev/null
    chdir: "{{ neovim_source_path }}"
  failed_when: false
  changed_when: false
  check_mode: false
  when: neovim_is_git.stat.isdir is defined and
        neovim_is_git.stat.isdir

- name: Get the current git tag.
  ansible.builtin.shell:
    cmd: git branch | grep \* | awk '{print $NF}' | sed s/\)//
    chdir: "{{ neovim_source_path }}"
  failed_when: false
  changed_when: false
  register: neovim_current_tag
  when: neovim_is_git.stat.isdir is defined and
        neovim_is_git.stat.isdir

# ---------------------------------------------------------------------------- #

- name: Checkout to specific git tag (master, nightly, stable)
  block:
    - name: Switching to "{{ neovim_desired_tag }}" tag.
      ansible.builtin.shell:
        cmd: "git checkout tags/{{ neovim_desired_tag }} || git checkout {{ neovim_desired_tag }} &>/dev/null"
        chdir: "{{ neovim_source_path }}"
      register: neovim_checkout
      when: neovim_desired_tag != neovim_current_tag.stdout

      # https://git-scm.com/docs/git-describe
    - name: Get Neovim latest tag at commit on "{{ neovim_desired_tag }}".
      ansible.builtin.shell:
        cmd: git describe
        chdir: "{{ neovim_source_path }}"
      failed_when: false
      changed_when: false
      check_mode: false
      register: neovim_latest_tag
      when: neovim_is_git

# ---------------------------------------------------------------------------- #

- name: Build and Install Neovim from source.
  block:
    - name: Clean Neovim build and deps dirs before building.
      ansible.builtin.shell:
        cmd: "make distclean"
        chdir: "{{ neovim_source_path }}"
      when: neovim_build_path_exists.stat.isdir is defined and
            neovim_build_path_exists.stat.isdir

    - name: Build neovim from source.
      ansible.builtin.command:
        cmd: "make"
        chdir: "{{ neovim_source_path }}"
      register: neovim_build
      when: commit_id is undefined or
            neovim_latest_tag | regex_search(commit_id) == none or
            neovim_installed_version != neovim_latest_tag and neovim_desired_tag == 'stable'

    - name: Install Neovim.
      become: true
      ansible.builtin.command:
        cmd: "sudo make install"
        chdir: "{{ neovim_source_path }}"
      when: neovim_build.changed == true

    - name: Cleanup neovim build and deps dirs after building.
      ansible.builtin.shell:
        cmd: "make distclean"
        chdir: "{{ neovim_source_path }}"
      when: neovim_build.changed == true

